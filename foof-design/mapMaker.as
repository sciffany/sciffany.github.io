package  {	import flash.net.*;	import flash.events.*;	import flash.display.*;	import flash.geom.*;	import flash.utils.*;		public class mapMaker{				//LABELLING SO THAT THIS GAME MAY PERPETUATE				var mapW:int;		var mapH:int;		var ts:int=64;				var bitmapArray:Array;		var rootClip:MovieClip; //reference to the main timeline				public var mapGrids:Array; //holds all the grids from the files		public var mapArrays:Array; //holds the arrays from the files		public var tileData:Array; //holds the bitmap of every sheet				public var mapArray:Array; //holds the tiles		public var mcArray:Array; //holds the name of every mc		public var itemArray:Array;// holds name of item for every item number						public var curMap:Array = [];// 2D integer array to code for tiles		public var curMc:Array = [];// 2D integer array to code for movieclip				public var tilesBmp:Bitmap;// bmp to place the map		public var transArray:Vector.<String>=new Vector.<String>; // holds string data for transporter destination (map name and coordinates)				public var mcSheet:MovieClip = new MovieClip(); //movieclip containing all movieclips with names				public var falseIList:Vector.<String>=new Vector.<String>;//set of pickupable items with coordinates		public var trueIList:Vector.<String>=new Vector.<String>;				public function mapMaker(rootClip:MovieClip, mapGrids:Array, mapArrays:Array, bitmapArray:Array) {						this.rootClip=rootClip;			this.mapGrids = mapGrids;			this.mapArrays = mapArrays;			this.bitmapArray = bitmapArray;			loadTiles();			loadmcSheet();		}				function loadmcSheet ():void {			curMc = mapGrids[1];			mapW = curMc[0].length;			mapH = curMc.length;						for (var ym:int = 0; ym < mapH; ym++) {				for (var xm:int = 0; xm < mapW; xm++) {					//var tileCode:int = curMap[yt][xt];					//var tileFile:int = tileCode/1000;					//var s:int = tileCode%1000;					//drawTile (this.bitmapArray[tileFile], s, xt, yt);				}			}														}				//makes a bmp out of the 2D number array		function loadTiles ():void {									curMap = mapGrids[0];			mapW = curMap[0].length;			mapH = curMap.length;						//the main bmp where you want to put all the tiles			tilesBmp = new Bitmap(new BitmapData(ts * mapW, ts * mapH));						for (var yt:int = 0; yt < mapH; yt++) {				for (var xt:int = 0; xt < mapW; xt++) {					var tileCode:int = curMap[yt][xt];					var tileFile:int = tileCode/1000;					var s:int = tileCode%1000;					drawTile (this.bitmapArray[tileFile], s, xt, yt);				}			}								}				//given the tile number and position, it draws small square to fill up the main bmp		function drawTile (tileBitmap:Bitmap, s:Number, xt:int, yt:int):void {			var bmp:Bitmap = getImageFromSheet (tileBitmap, s);			var rect:Rectangle = new Rectangle(0, 0, ts, ts);			var pt:Point = new Point(xt * ts, yt * ts);			tilesBmp.bitmapData.copyPixels (bmp.bitmapData, rect, pt);		}				//given the tile number, it returns a bitmap of the tile		function getImageFromSheet (tileBitmap:Bitmap, s:Number):Bitmap {			var sheetColumns:int = tileBitmap.width / ts;			var col:int = s % sheetColumns;			var row:int = Math.floor(s / sheetColumns);			var rect:Rectangle = new Rectangle(col * ts, row * ts, ts, ts);			var pt:Point = new Point(0, 0);			var bmp:Bitmap =  new Bitmap(new BitmapData(ts, ts));			bmp.bitmapData.copyPixels (tileBitmap.bitmapData, rect, pt);			return bmp;		}							}	}